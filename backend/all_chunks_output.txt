
🔹 Chunk 1
📄 Source: event.txt
📍 Start: 0  End: 512
📝 Content:
This database is used to track when and where users access gates across an organization. 
The core table is events, which logs every access attempt. Each row in the events table links to the organisation_users 
table through the orguserid column and to the access_points table through the accesspointid column. The organisation_users table maps each orguserid to a user's name, and the access_points table maps the gate/door name as accesspointname, 
which describe where the access occurred. This structure enables the system to determine who accessed which door and when. 
The events table includes several time fields. The recommended column for all date- or time-based queries is timezonedeventtime,
 which is already localized to the relevant time zone and formatted for human readability. Other time fields like eventtimeepoch and tzdatetime exist but are not typically needed and should be ignored
  unless specifically required. the direction column in events table tells about the entry and exit of user so if the user asks for number of entries and exits and all those type of question use this column or else dont use All other columns in the database,
   including IDs and names, are stored as text and are case-sensitive. This applies to fields such as orguserid, accesspointid, name, accesspointname, accesstype, mobileaccessmode, and even fields that appear numeric. Therefore, SQL queries must use the ILIKE operator
    instead of = to ensure correct matching regardless of text casing. For example, use WHERE accesspointname ILIKE 'Main Gate' rather than using =. Unless the user explicitly refers to a specific type of access event,
the eventtype column in the events table should not be used. Similarly, avoid using columns like accesstype, or mobileaccessmode unless they are mentioned in the user query.
 Do not add these filters by default. When generating SQL queries, always prefer simple, flat queries. Avoid unnecessary nesting, subqueries, or overly complex joins. Focus on matching only what the prompt
  requires using the correct fields and relationships, and keep the query readable and minimal unless complexity is clearly demanded by the question. This schema enables reliable, 
  human-centric queries to answer questions like “Who accessed this door yesterday?”, “List all users who visited 
  the site last week”, or “Show all accesses at Main Gate today.”
   Time filtering should only be applied using the timezonedeventtime column,
and all other filters should use ILIKE on the appropriate text fields.
----------------------------------------------------------------------------------------------------
